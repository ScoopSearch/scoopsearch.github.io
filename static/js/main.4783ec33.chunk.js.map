{"version":3,"sources":["components/SearchBar.tsx","components/SearchStatus.tsx","serialization/DateConverter.ts","serialization/MetadataJson.ts","serialization/ManifestJson.ts","serialization/SearchResultsJson.ts","components/SearchProcessor.tsx","components/SearchPagination.tsx","components/CopyToClipboardButton.tsx","components/KnownBucketIcon.tsx","components/StarsBadge.tsx","utils.ts","components/SearchResult.tsx","components/CopyToClipboardHandler.tsx","components/Search.tsx","serialization/BucketsResultsJson.ts","components/Buckets.tsx","components/NavBar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SearchBar","props","searchInput","delayBeforeSearch","handleChange","e","setState","query","target","value","clearDelayBeforeSearchTimeout","setTimeout","onQueryChange","handleSubmit","preventDefault","state","React","createRef","this","current","focus","prevProps","clearTimeout","undefined","Form","onSubmit","InputGroup","Prepend","Text","Control","ref","size","type","placeholder","onChange","PureComponent","defaultProps","SearchStatus","searching","Spinner","animation","variant","resultsCount","DateConverter","JsonConverter","date","Error","Date","MetadataJson","JsonObject","JsonProperty","String","Boolean","Number","ManifestJson","Any","propertyName","fallback","tryGetHighlights","propertyNames","_highlights","name","tryGetHighlight","license","metadata","repository","replace","authorName","description","version","homepage","parser","document","createElement","href","origin","SearchResultsJson","jsonObject","jsonConvert","deserializeObject","JsonConvert","Array","SearchProcessor","abortController","AbortController","sortModes","DisplayName","OrderBy","handleSortChange","onSortIndexChange","selectedIndex","fetchDataAsync","signal","prevState","page","sortIndex","abort","abortSignal","url","process","fetch","method","body","JSON","stringify","count","search","trim","searchMode","orderby","join","skip","resultsPerPage","top","select","highlight","highlightPreTag","highlightPostTag","headers","then","response","ok","status","statusText","json","data","results","Create","onResultsChange","catch","error","console","Row","Col","className","lg","as","custom","map","item","idx","key","SearchPagination","changePage","total_pages","Math","ceil","max","min","onPageChange","currentPage","totalPages","paginationItems","minPage","maxPage","maxPageOffset","PAGINATION_OFFSET","minPageOffset","pageIdx","push","Pagination","Ellipsis","disabled","Item","active","onClick","Prev","Next","CopyToClipboardButton","handleClick","copied","Button","KnownBucketIcon","OverlayTrigger","placement","delay","overlay","Tooltip","id","color","StarsBadge","Badge","stars","Utils","extractPathFromUrl","separator","split","slice","dayjs","extend","localizedFormat","SearchResult","handleCopyToClipboard","content","onCopyToClipbard","displayHighlight","dangerouslySetInnerHTML","__html","result","score","favicon","highlightedName","highlightedDescription","highlightedLicense","highlightedRepository","highlightedAuthorName","highlightedVersion","Card","Header","src","width","height","repositoryOfficial","Body","Container","committed","format","noGutters","xs","filePath","sha","readOnly","Append","CopyToClipboardHandler","textAreaRef","textArea","execCommand","blur","onContentCopied","style","position","left","Search","getCurrentQuery","location","length","decodeURIComponent","substr","getCurrentPage","parseInt","match","params","handleQueryChange","history","encodeURIComponent","pathname","handleResultsChange","searchResults","handlePageChange","newPage","sessionStorage","setItem","toString","contentToCopy","handleContentCopied","getItem","sm","searchResult","BucketsResultsJson","Buckets","sortOrder","sortResults","officialBuckets","communityBuckets","bucket","manifests","official","concat","officialRepository","facets","filter","sort","x","y","localeCompare","Fragment","Table","striped","bordered","hover","to","NavBar","Navbar","expand","bg","Brand","Link","Toggle","aria-controls","Collapse","Nav","App","path","component","window","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.4783ec33.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport { Form, InputGroup } from 'react-bootstrap';\nimport { FaSearch } from 'react-icons/fa';\n\nconst DELAY_SEARCH_AFTER_KEYPRESS: number = 250;\n\nclass SearchBar extends PureComponent<ISearchBarProps, ISearchBarState> {\n  static defaultProps = {\n    query: '',\n  };\n\n  searchInput: React.RefObject<HTMLInputElement>;\n  delayBeforeSearch?: NodeJS.Timeout;\n\n  constructor(props: ISearchBarProps) {\n    super(props);\n    this.searchInput = React.createRef<HTMLInputElement>();\n\n    this.state = {\n      query: this.props.query,\n    };\n  }\n\n  componentDidMount() {\n    this.searchInput.current!.focus();\n  }\n\n  componentWillUnmount() {\n    this.clearDelayBeforeSearchTimeout();\n  }\n\n  componentDidUpdate(prevProps: ISearchBarProps) {\n    if (prevProps.query !== this.props.query) {\n      this.setState({ query: this.props.query });\n    }\n  }\n\n  handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ query: e.target.value });\n\n    this.clearDelayBeforeSearchTimeout();\n\n    this.delayBeforeSearch = setTimeout(\n      (query) => this.props.onQueryChange(query),\n      DELAY_SEARCH_AFTER_KEYPRESS,\n      e.target.value\n    );\n  };\n\n  handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    this.props.onQueryChange(this.state.query);\n  };\n\n  clearDelayBeforeSearchTimeout() {\n    if (this.delayBeforeSearch) {\n      clearTimeout(this.delayBeforeSearch);\n      this.delayBeforeSearch = undefined;\n    }\n  }\n\n  render() {\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <InputGroup>\n          <InputGroup.Prepend>\n            <InputGroup.Text>\n              <FaSearch />\n            </InputGroup.Text>\n          </InputGroup.Prepend>\n          <Form.Control\n            ref={this.searchInput}\n            size=\"lg\"\n            type=\"text\"\n            placeholder=\"Search an app\"\n            value={this.state.query}\n            onChange={this.handleChange}\n          />\n        </InputGroup>\n      </Form>\n    );\n  }\n}\n\ninterface ISearchBarProps {\n  query: string;\n  onQueryChange: (query: string) => void;\n}\n\ninterface ISearchBarState {\n  query: string;\n}\n\nexport default SearchBar;\n","import React, { PureComponent } from 'react';\nimport { Spinner } from 'react-bootstrap';\n\nclass SearchStatus extends PureComponent<ISearchStatusProps> {\n  render() {\n    if (this.props.searching) {\n      return (\n        <span>\n          <span>Searching for matching {this.props.type}...</span>{' '}\n          <Spinner animation=\"border\" size=\"sm\" variant=\"secondary\" />\n        </span>\n      );\n    } else if (this.props.resultsCount) {\n      return (\n        <span>\n          Found {this.props.resultsCount} {this.props.type}\n          {this.props.query && (\n            <span>\n              {' '}\n              for '<strong>{this.props.query}</strong>'\n            </span>\n          )}\n          .\n        </span>\n      );\n    } else {\n      return (\n        <span>\n          No result found\n          {this.props.query && (\n            <span>\n              {' '}\n              for '<strong>{this.props.query}</strong>'\n            </span>\n          )}\n          .\n        </span>\n      );\n    }\n  }\n}\n\ninterface ISearchStatusProps {\n  query?: string;\n  resultsCount: number;\n  searching: boolean;\n  type: string;\n}\n\nexport default SearchStatus;\n","import { JsonConverter, JsonCustomConvert } from 'json2typescript';\n\n@JsonConverter\nexport class DateConverter implements JsonCustomConvert<Date> {\n  serialize(date: Date): any {\n    throw new Error('Conversion not supported');\n  }\n  deserialize(date: any): Date {\n    return new Date(date);\n  }\n}\n","import { JsonObject, JsonProperty } from 'json2typescript';\nimport { DateConverter } from './DateConverter';\n\n@JsonObject('MetadataJson')\nexport class MetadataJson {\n  @JsonProperty('Repository', String)\n  repository: string = '';\n\n  @JsonProperty('OfficialRepository', Boolean)\n  repositoryOfficial: boolean = false;\n\n  @JsonProperty('RepositoryStars', Number)\n  stars: number = 0;\n\n  @JsonProperty('BranchName', String, true)\n  branchName?: string = '';\n\n  @JsonProperty('FilePath', String)\n  filePath: string = '';\n\n  @JsonProperty('AuthorName', String)\n  authorName: string = '';\n\n  @JsonProperty('Committed', DateConverter)\n  committed: Date = new Date();\n\n  @JsonProperty('Sha', String)\n  sha: string = '';\n}\n","import { JsonObject, JsonProperty, Any } from 'json2typescript';\nimport { MetadataJson } from './MetadataJson';\n\n@JsonObject('ManifestJson')\nexport class ManifestJson {\n  @JsonProperty('Id', String)\n  id: string = '';\n\n  @JsonProperty('@search.score', Number)\n  score: number = 0;\n\n  @JsonProperty('Name', String)\n  name: string = '';\n\n  @JsonProperty('NamePartial', String)\n  namePartial: string = '';\n\n  @JsonProperty('NameSuffix', String)\n  nameSuffix: string = '';\n\n  @JsonProperty('Description', String, true)\n  description?: string = undefined;\n\n  @JsonProperty('Homepage', String, true)\n  homepage?: string = undefined;\n\n  @JsonProperty('License', String, true)\n  license?: string = undefined;\n\n  @JsonProperty('Version', String, true)\n  version: string = '';\n\n  @JsonProperty('Metadata', MetadataJson)\n  metadata: MetadataJson = new MetadataJson();\n\n  @JsonProperty('@search.highlights', Any, true)\n  private _highlights: any = undefined;\n\n  get highlightedName() {\n    return this.tryGetHighlights(\n      ['Name', 'NamePartial', 'NameSuffix'],\n      this.name\n    );\n  }\n\n  get highlightedLicense() {\n    return this.tryGetHighlight('License', this.license);\n  }\n\n  get highlightedRepository() {\n    return this.tryGetHighlight(\n      'Metadata/Repository',\n      this.metadata.repository.replace('https://github.com/', '')\n    );\n  }\n\n  get highlightedAuthorName() {\n    return this.tryGetHighlight(\n      'Metadata/AuthorName',\n      this.metadata.authorName\n    );\n  }\n\n  get highlightedDescription() {\n    return this.tryGetHighlight('Description', this.description);\n  }\n\n  get highlightedVersion() {\n    return this.tryGetHighlight('Version', this.version);\n  }\n\n  tryGetHighlight(propertyName: string, fallback?: string) {\n    return this.tryGetHighlights([propertyName], fallback);\n  }\n\n  tryGetHighlights(propertyNames: string[], fallback?: string) {\n    for (const propertyName of propertyNames) {\n      if (this._highlights && this._highlights[propertyName]) {\n        return this._highlights[propertyName][0];\n      }\n    }\n\n    return fallback;\n  }\n\n  get favicon() {\n    if (this.homepage) {\n      var parser = document.createElement('a');\n      parser.href = this.homepage;\n\n      return parser.origin + '/favicon.ico';\n    }\n\n    return undefined;\n  }\n}\n","import { JsonObject, JsonConvert, JsonProperty } from 'json2typescript';\nimport { ManifestJson } from './ManifestJson';\n\n@JsonObject('SearchResultsJson')\nexport class SearchResultsJson {\n  private static jsonConvert = new JsonConvert();\n\n  static Create(jsonObject: any) {\n    return SearchResultsJson.jsonConvert.deserializeObject(\n      jsonObject,\n      SearchResultsJson\n    );\n  }\n\n  @JsonProperty('@odata.count', Number)\n  count: number = 0;\n\n  @JsonProperty('value', [ManifestJson])\n  results: ManifestJson[] = Array<ManifestJson>();\n}\n","import React, { PureComponent } from 'react';\nimport { Col, Row, Form, InputGroup } from 'react-bootstrap';\n\nimport SearchStatus from './SearchStatus';\nimport { SearchResultsJson } from '../serialization/SearchResultsJson';\n\nclass SearchProcessor extends PureComponent<\n  ISearchProcessorProps,\n  ISearchProcessorState\n> {\n  private abortController: AbortController = new AbortController();\n\n  private sortModes: ISortMode[] = [\n    {\n      DisplayName: 'Best match',\n      OrderBy: [\n        'search.score() desc',\n        'Metadata/OfficialRepositoryNumber desc',\n        'NameSortable asc',\n      ],\n    },\n    {\n      DisplayName: 'Name',\n      OrderBy: [\n        'NameSortable asc',\n        'Metadata/OfficialRepositoryNumber desc',\n        'Metadata/RepositoryStars desc',\n        'Metadata/Committed desc',\n      ],\n    },\n    {\n      DisplayName: 'Newest',\n      OrderBy: [\n        'Metadata/Committed desc',\n        'Metadata/OfficialRepositoryNumber desc',\n        'Metadata/RepositoryStars desc',\n      ],\n    },\n  ];\n\n  constructor(props: ISearchProcessorProps) {\n    super(props);\n\n    this.state = {\n      resultsCount: undefined,\n      searching: false,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchDataAsync(this.abortController.signal, this.props.query);\n  }\n\n  componentDidUpdate(\n    prevProps: ISearchProcessorProps,\n    prevState: ISearchProcessorState\n  ) {\n    if (\n      this.props.query !== prevProps.query ||\n      this.props.page !== prevProps.page ||\n      this.props.sortIndex !== prevProps.sortIndex\n    ) {\n      this.abortController.abort();\n      this.abortController = new AbortController();\n      this.fetchDataAsync(this.abortController.signal, this.props.query);\n    }\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  handleSortChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    this.props.onSortIndexChange(e.target.selectedIndex);\n  };\n\n  fetchDataAsync(abortSignal: AbortSignal, query: string) {\n    this.setState({\n      searching: true,\n    });\n\n    const url = `${process.env.REACT_APP_AZURESEARCH_URL}/search?api-version=2020-06-30`;\n\n    fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        count: true,\n        search: query.trim(),\n        searchMode: 'all',\n        orderby: this.sortModes[this.props.sortIndex].OrderBy.join(', '),\n        skip: (this.props.page - 1) * this.props.resultsPerPage,\n        top: this.props.resultsPerPage,\n        select: [\n          'Id',\n          'Name',\n          'NamePartial',\n          'NameSuffix',\n          'Description',\n          'Homepage',\n          'License',\n          'Version',\n          'Metadata/Repository',\n          'Metadata/FilePath',\n          'Metadata/AuthorName',\n          'Metadata/OfficialRepository',\n          'Metadata/RepositoryStars',\n          'Metadata/Committed',\n          'Metadata/Sha',\n        ].join(','),\n        highlight: [\n          'Name',\n          'NamePartial',\n          'NameSuffix',\n          'Description',\n          'Version',\n          'License',\n          'Metadata/Repository',\n          'Metadata/AuthorName',\n        ].join(','),\n        highlightPreTag: '<mark>',\n        highlightPostTag: '</mark>',\n      }),\n      headers: {\n        'api-key': process.env.REACT_APP_AZURESEARCH_KEY!,\n        'Content-Type': 'application/json',\n      },\n      signal: abortSignal,\n    })\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error(`${response.status} ${response.statusText}`);\n        }\n\n        return response.json();\n      })\n      .then((data) => {\n        const results = SearchResultsJson.Create(data);\n\n        this.setState({\n          searching: false,\n          resultsCount: results.count,\n        });\n        this.props.onResultsChange(results);\n      })\n      .catch((error: Error) => {\n        if (error.name !== 'AbortError') {\n          this.setState({\n            searching: false,\n            resultsCount: undefined,\n          });\n          this.props.onResultsChange(undefined);\n          console.error(error);\n        }\n      });\n  }\n\n  render() {\n    return (\n      <Form>\n        <Row>\n          <Col className=\"my-auto\">\n            <SearchStatus\n              query={this.props.query}\n              resultsCount={this.state.resultsCount!}\n              searching={this.state.searching!}\n              type=\"applications\"\n            />\n          </Col>\n          <Col lg={3}>\n            <InputGroup size=\"sm\">\n              <InputGroup.Prepend>\n                <InputGroup.Text>Sort by</InputGroup.Text>\n              </InputGroup.Prepend>\n              <Form.Control\n                as=\"select\"\n                size=\"sm\"\n                custom\n                value={this.props.sortIndex}\n                onChange={this.handleSortChange}\n              >\n                {this.sortModes.map((item, idx) => (\n                  <option key={idx} value={idx}>\n                    {item.DisplayName}\n                  </option>\n                ))}\n              </Form.Control>\n            </InputGroup>\n          </Col>\n        </Row>\n      </Form>\n    );\n  }\n}\n\ninterface ISortMode {\n  DisplayName: string;\n  OrderBy: string[];\n}\n\ninterface ISearchProcessorProps {\n  page: number;\n  query: string;\n  sortIndex: number;\n  resultsPerPage: number;\n  onResultsChange: (value?: SearchResultsJson) => void;\n  onSortIndexChange: (sortIndex: number) => void;\n}\n\ninterface ISearchProcessorState {\n  resultsCount?: number;\n  searching: boolean;\n}\n\nexport default SearchProcessor;\n","import React, { PureComponent } from 'react';\nimport { Pagination } from 'react-bootstrap';\n\nconst PAGINATION_OFFSET: number = 2;\n\nclass SearchPagination extends PureComponent<ISearchPaginationProps> {\n  changePage = (page: number) => {\n    const total_pages = Math.ceil(\n      this.props.resultsCount! / this.props.resultsPerPage\n    );\n    page = Math.max(1, Math.min(page, total_pages));\n    this.props.onPageChange(page);\n  };\n\n  render() {\n    const { currentPage, resultsCount, resultsPerPage } = this.props;\n    if (resultsCount) {\n      const totalPages = Math.ceil(resultsCount / resultsPerPage);\n      if (totalPages > 1) {\n        let paginationItems = [];\n\n        let minPage = Math.max(2, currentPage - PAGINATION_OFFSET);\n        let maxPage = Math.min(totalPages - 1, currentPage + PAGINATION_OFFSET);\n\n        // Offset minPage and maxPage to always have the same number of pagination items\n        let maxPageOffset = PAGINATION_OFFSET * 2 - (maxPage - minPage);\n        let minPageOffset = maxPage - (maxPage + maxPageOffset);\n        maxPage = Math.min(totalPages - 1, maxPage + maxPageOffset);\n        minPage = Math.max(2, minPage + minPageOffset);\n\n        for (let pageIdx = minPage; pageIdx <= maxPage; pageIdx++) {\n          if (\n            pageIdx === currentPage - PAGINATION_OFFSET + minPageOffset ||\n            pageIdx === currentPage + PAGINATION_OFFSET + maxPageOffset\n          ) {\n            paginationItems.push(\n              <Pagination.Ellipsis key={pageIdx} disabled />\n            );\n          } else {\n            paginationItems.push(\n              <Pagination.Item\n                key={pageIdx}\n                active={pageIdx === currentPage}\n                onClick={() => this.changePage(pageIdx)}\n              >\n                {pageIdx}\n              </Pagination.Item>\n            );\n          }\n        }\n\n        return (\n          <Pagination size=\"sm\">\n            <Pagination.Prev\n              key=\"prev\"\n              onClick={() => this.changePage(currentPage - 1)}\n            />\n            <Pagination.Item\n              key={1}\n              active={1 === currentPage}\n              onClick={() => this.changePage(1)}\n            >\n              {1}\n            </Pagination.Item>\n            {paginationItems}\n            <Pagination.Item\n              key={totalPages}\n              active={totalPages === currentPage}\n              onClick={() => this.changePage(totalPages)}\n            >\n              {totalPages}\n            </Pagination.Item>\n            <Pagination.Next\n              key=\"next\"\n              onClick={() => this.changePage(currentPage + 1)}\n            />\n          </Pagination>\n        );\n      }\n    }\n\n    return null;\n  }\n}\n\ninterface ISearchPaginationProps {\n  currentPage: number;\n  resultsCount?: number;\n  resultsPerPage: number;\n  onPageChange: (newPage: number) => void;\n}\n\nexport default SearchPagination;\n","import React, { PureComponent } from 'react';\nimport { Button } from 'react-bootstrap';\n\nimport { FaClipboard, FaCheck } from 'react-icons/fa';\n\nconst CLIPBOARD_COPY_NOTIFICATION: number = 1500;\n\nclass CopyToClipboardButton extends PureComponent<\n  ICopyToClipboardButtonProps,\n  ICopyToClipboardButtonState\n> {\n  constructor(props: ICopyToClipboardButtonProps) {\n    super(props);\n    this.state = { copied: false };\n  }\n\n  componentDidUpdate(\n    prevProps: ICopyToClipboardButtonProps,\n    prevState: ICopyToClipboardButtonState\n  ) {\n    if (this.state.copied && this.state.copied !== prevState.copied) {\n      setTimeout(() => {\n        this.setState({ copied: false });\n      }, CLIPBOARD_COPY_NOTIFICATION);\n    }\n  }\n\n  handleClick = (e: React.MouseEvent<HTMLButtonElement>) => {\n    this.props.onClick();\n    this.setState({ copied: true });\n  };\n\n  render() {\n    return (\n      <Button\n        className={this.props.className}\n        variant=\"secondary\"\n        onClick={this.handleClick}\n        disabled={this.state.copied}\n      >\n        {this.state.copied ? (\n          <FaCheck className=\"faIconVerticalAlign\" />\n        ) : (\n          <FaClipboard className=\"faIconVerticalAlign\" />\n        )}\n      </Button>\n    );\n  }\n}\n\ninterface ICopyToClipboardButtonState {\n  copied: boolean;\n}\n\ninterface ICopyToClipboardButtonProps {\n  className?: string;\n  onClick: () => void;\n}\n\nexport default CopyToClipboardButton;\n","import React from 'react';\nimport { OverlayTrigger, Tooltip } from 'react-bootstrap';\nimport { GoVerified } from 'react-icons/go';\n\nexport const KnownBucketIcon: React.FC = () => {\n  return (\n    <OverlayTrigger\n      placement=\"auto\"\n      delay={250}\n      overlay={<Tooltip id=\"tooltip\">Well known bucket</Tooltip>}\n    >\n      <GoVerified className=\"ml-1 faIconVerticalAlign\" color=\"#2E86C1\" />\n    </OverlayTrigger>\n  );\n};\n","import React from 'react';\nimport { Badge } from 'react-bootstrap';\nimport { FaStar } from 'react-icons/fa';\n\nexport const StarsBadge: React.FC<IStarsBadgeProps> = (props) => {\n  return (\n    <Badge variant=\"secondary\" className=\"ml-1 starsBadge\">\n      <span>{props.stars}</span> <FaStar />\n    </Badge>\n  );\n};\n\ninterface IStarsBadgeProps {\n  stars: number;\n}\n","export class Utils {\n  static extractPathFromUrl = (url: string, separator: string = '/') => {\n    return url.split('/').slice(-2).join(separator);\n  };\n}\n","import React, { PureComponent } from 'react';\nimport { Card, Container, Row, Col, Form, InputGroup } from 'react-bootstrap';\nimport dayjs from 'dayjs';\nimport localizedFormat from 'dayjs/plugin/localizedFormat';\nimport { Img } from 'react-image';\nimport { FaExternalLinkAlt } from 'react-icons/fa';\n\nimport CopyToClipboardButton from './CopyToClipboardButton';\nimport { ManifestJson } from '../serialization/ManifestJson';\nimport { KnownBucketIcon } from './KnownBucketIcon';\nimport { StarsBadge } from './StarsBadge';\nimport { Utils } from '../utils';\n\ndayjs.extend(localizedFormat);\n\nclass SearchResult extends PureComponent<ISearchResultProps> {\n  handleCopyToClipboard = (content: string) => {\n    this.props.onCopyToClipbard(content);\n  };\n\n  private displayHighlight = (content?: string) => {\n    return (\n      content && (\n        <span\n          dangerouslySetInnerHTML={{\n            __html: content,\n          }}\n        />\n      )\n    );\n  };\n\n  render() {\n    const {\n      id,\n      score,\n      name,\n      favicon,\n      highlightedName,\n      highlightedDescription,\n      highlightedLicense,\n      highlightedRepository,\n      highlightedAuthorName,\n      highlightedVersion,\n      metadata,\n      homepage,\n    } = this.props.result;\n\n    return (\n      <Card key={id} className=\"mb-2\">\n        <Card.Header>\n          {favicon && (\n            <Img className=\"mr-2\" src={favicon} width={20} height={20} />\n          )}\n          <strong>{this.displayHighlight(highlightedName)}</strong>\n          {' - '}\n          {this.displayHighlight(highlightedVersion)}\n          {metadata.repositoryOfficial && <KnownBucketIcon />}\n          {process.env.NODE_ENV === 'development' && ` - @score: ${score}`}\n        </Card.Header>\n        <Card.Body>\n          <Container>\n            {highlightedDescription && (\n              <Row className=\"mb-3\">\n                <Col>{this.displayHighlight(highlightedDescription)}</Col>\n              </Row>\n            )}\n            <small>\n              <Row>\n                <Col lg={6}>\n                  Updated: {dayjs(metadata.committed).format('LLL')}\n                </Col>\n                <Col lg={6}>\n                  License: {this.displayHighlight(highlightedLicense)}\n                </Col>\n              </Row>\n\n              <Row className=\"mb-2\">\n                <Col lg={6}>\n                  Bucket:{' '}\n                  <a href={metadata.repository}>\n                    {this.displayHighlight(highlightedRepository)}\n                  </a>\n                  <StarsBadge stars={metadata.stars} />\n                  {metadata.repositoryOfficial && <KnownBucketIcon />}\n                  {!metadata.repositoryOfficial && (\n                    <CopyToClipboardButton\n                      className=\"ml-1 ms copyToClipbardMiniButton\"\n                      onClick={() =>\n                        this.handleCopyToClipboard(\n                          `scoop bucket add ${Utils.extractPathFromUrl(\n                            metadata.repository,\n                            '_'\n                          )} ${metadata.repository}`\n                        )\n                      }\n                    />\n                  )}\n                </Col>\n                <Col lg={6}>\n                  Commiter: {this.displayHighlight(highlightedAuthorName)}\n                </Col>\n              </Row>\n              <Row className=\"text-center\" noGutters>\n                <Col lg xs={4} className=\"mt-1 mb-2\">\n                  <a href={homepage}>\n                    Homepage <FaExternalLinkAlt />\n                  </a>\n                </Col>\n                <Col lg xs={4} className=\"mt-1 mb-2\">\n                  <a\n                    href={`${metadata.repository}/blob/master/${metadata.filePath}`}\n                  >\n                    Manifest <FaExternalLinkAlt />\n                  </a>\n                </Col>\n                <Col lg xs={4} className=\"mt-1 mb-2\">\n                  <a href={`${metadata.repository}/commit/${metadata.sha}`}>\n                    Commit <FaExternalLinkAlt />\n                  </a>\n                </Col>\n                <Col lg={5}>\n                  <InputGroup size=\"sm\">\n                    <InputGroup.Prepend>\n                      <InputGroup.Text className=\"scoopCopyCommand border-right-0\">\n                        &gt;\n                      </InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <Form.Control\n                      className=\"border-left-0\"\n                      readOnly\n                      type=\"text\"\n                      value={`scoop install ${name}`}\n                    />\n\n                    <InputGroup.Append>\n                      <CopyToClipboardButton\n                        onClick={() =>\n                          this.handleCopyToClipboard(`scoop install ${name}`)\n                        }\n                      />\n                    </InputGroup.Append>\n                  </InputGroup>\n                </Col>\n              </Row>\n            </small>\n          </Container>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\ninterface ISearchResultProps {\n  result: ManifestJson;\n  onCopyToClipbard: (content: string) => void;\n}\n\nexport default SearchResult;\n","import React, { PureComponent } from 'react';\n\nclass CopyToClipboardHandler extends PureComponent<\n  ICopyToClipboardHandlerProps\n> {\n  private textAreaRef = React.createRef<HTMLTextAreaElement>();\n\n  componentDidUpdate() {\n    if (this.props.content) {\n      const textArea = this.textAreaRef.current!;\n\n      textArea.value = this.props.content;\n      textArea.select();\n      document.execCommand('copy');\n      textArea.blur();\n\n      this.props.onContentCopied();\n    }\n  }\n\n  render() {\n    return (\n      <textarea\n        ref={this.textAreaRef}\n        readOnly\n        style={{ position: 'absolute', left: -9999 }}\n      />\n    );\n  }\n}\n\ninterface ICopyToClipboardHandlerProps {\n  content?: string;\n  onContentCopied: () => void;\n}\n\nexport default CopyToClipboardHandler;\n","import React, { PureComponent } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport { RouteComponentProps } from 'react-router-dom';\n\nimport SearchBar from './SearchBar';\nimport SearchProcessor from './SearchProcessor';\nimport SearchPagination from './SearchPagination';\nimport SearchResult from './SearchResult';\nimport { SearchResultsJson } from '../serialization/SearchResultsJson';\nimport { ManifestJson } from '../serialization/ManifestJson';\nimport CopyToClipboardHandler from './CopyToClipboardHandler';\n\nconst RESULTS_PER_PAGE: number = 20;\n\nclass Search extends PureComponent<ISearchProps, ISearchState> {\n  constructor(props: ISearchProps) {\n    super(props);\n\n    const sortIndex = parseInt(sessionStorage.getItem('sortIndex') || '0');\n\n    this.state = {\n      query: this.getCurrentQuery(),\n      currentPage: this.getCurrentPage(),\n      sortIndex: sortIndex,\n    };\n  }\n\n  componentDidUpdate(prevProps: ISearchProps) {\n    if (prevProps.location.search !== this.props.location.search) {\n      this.setState({ query: this.getCurrentQuery() });\n    }\n    if (prevProps.location.pathname !== this.props.location.pathname) {\n      this.setState({ currentPage: this.getCurrentPage() });\n    }\n  }\n\n  getCurrentQuery = () => {\n    return this.props.location.search.length > 1\n      ? decodeURIComponent(this.props.location.search.substr(1))\n      : '';\n  };\n\n  getCurrentPage = () => {\n    return parseInt(this.props.match.params.page || '1');\n  };\n\n  handleQueryChange = (query: string) => {\n    this.props.history.replace({\n      search: encodeURIComponent(query),\n      pathname: '/apps',\n    });\n    this.setState({ query, currentPage: 1 });\n  };\n\n  handleResultsChange = (e?: SearchResultsJson) => {\n    this.setState({ searchResults: e });\n  };\n\n  handlePageChange = (newPage: number) => {\n    this.props.history.replace({\n      pathname: `/apps/${newPage}`,\n      search: this.props.location.search,\n    });\n\n    this.setState({ currentPage: newPage });\n  };\n\n  handleSortChange = (sortIndex: number) => {\n    sessionStorage.setItem('sortIndex', sortIndex.toString());\n    this.setState({ sortIndex: sortIndex });\n  };\n\n  handleCopyToClipboard = (content: string) => {\n    this.setState({ contentToCopy: content });\n  };\n\n  handleContentCopied = () => {\n    this.setState({ contentToCopy: undefined });\n  };\n\n  render() {\n    return (\n      <div className=\"Search\">\n        <CopyToClipboardHandler\n          content={this.state.contentToCopy}\n          onContentCopied={this.handleContentCopied}\n        />\n\n        <Container className=\"mt-5 mb-5\">\n          <Row className=\"justify-content-center\">\n            <Col sm={8}>\n              <SearchBar\n                query={this.state.query}\n                onQueryChange={this.handleQueryChange}\n              />\n            </Col>\n          </Row>\n\n          <Row className=\"mt-5 mb-1\">\n            <Col>\n              <SearchProcessor\n                resultsPerPage={RESULTS_PER_PAGE}\n                page={this.state.currentPage}\n                query={this.state.query}\n                sortIndex={this.state.sortIndex}\n                onResultsChange={this.handleResultsChange}\n                onSortIndexChange={this.handleSortChange}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col className=\"d-flex justify-content-center\">\n              <SearchPagination\n                resultsPerPage={RESULTS_PER_PAGE}\n                currentPage={this.state.currentPage}\n                resultsCount={this.state.searchResults?.count}\n                onPageChange={this.handlePageChange}\n              />\n            </Col>\n          </Row>\n\n          <Row className=\"mt-2\">\n            <Col>\n              {this.state.searchResults?.results.map(\n                (searchResult: ManifestJson) => (\n                  <SearchResult\n                    key={searchResult.id}\n                    result={searchResult}\n                    onCopyToClipbard={this.handleCopyToClipboard}\n                  />\n                )\n              )}\n            </Col>\n          </Row>\n\n          <Row>\n            <Col className=\"d-flex justify-content-center\">\n              <SearchPagination\n                resultsPerPage={RESULTS_PER_PAGE}\n                currentPage={this.state.currentPage}\n                resultsCount={this.state.searchResults?.count}\n                onPageChange={this.handlePageChange}\n              />\n            </Col>\n          </Row>\n        </Container>\n      </div>\n    );\n  }\n}\n\ninterface ISearchParams {\n  page?: string;\n}\n\ninterface ISearchProps extends RouteComponentProps<ISearchParams> {}\n\ninterface ISearchState {\n  query: string;\n  currentPage: number;\n  sortIndex: number;\n  searchResults?: SearchResultsJson;\n  contentToCopy?: string;\n}\n\nexport default Search;\n","import { JsonObject, JsonConvert, JsonProperty } from 'json2typescript';\nimport { BucketsResultsFacetJson } from './BucketsResultsFacetJson';\n\n@JsonObject('BucketsResultsJson')\nexport class BucketsResultsJson {\n  private static jsonConvert = new JsonConvert();\n\n  static Create(jsonObject: any) {\n    return BucketsResultsJson.jsonConvert.deserializeObject(\n      jsonObject,\n      BucketsResultsJson\n    );\n  }\n\n  @JsonProperty('@odata.count', Number)\n  count: number = 0;\n\n  @JsonProperty('@search.facets')\n  results: { [key: string]: BucketsResultsFacetJson[] } = {};\n}\n","import React, { PureComponent } from 'react';\nimport Table from 'react-bootstrap/Table';\nimport { Container, Col, Row, InputGroup, Form } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\n\nimport { BucketsResultsJson } from '../serialization/BucketsResultsJson';\nimport SearchStatus from './SearchStatus';\nimport { KnownBucketIcon } from './KnownBucketIcon';\nimport { Utils } from '../utils';\n\nclass Buckets extends PureComponent<{}, IBucketsState> {\n  private abortController: AbortController = new AbortController();\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      searching: false,\n      sortIndex: 0,\n      results: [],\n    };\n  }\n\n  private sortModes: string[] = ['Default', 'Name', 'Manifests'];\n\n  async componentDidMount() {\n    this.setState({\n      searching: true,\n      results: [],\n    });\n\n    const officialBuckets = await this.fetchDataAsync(\n      this.abortController.signal,\n      true\n    );\n    const communityBuckets = await this.fetchDataAsync(\n      this.abortController.signal,\n      false\n    );\n\n    let results: IBucket[] = officialBuckets.results['Metadata/Repository']\n      .map<IBucket>((item) => {\n        return { bucket: item.value, manifests: item.count, official: true };\n      })\n      .concat(\n        communityBuckets.results['Metadata/Repository'].map<IBucket>((item) => {\n          return { bucket: item.value, manifests: item.count, official: false };\n        })\n      );\n\n    results = this.sortResults(results, this.state.sortIndex);\n    this.setState({\n      searching: false,\n      results: results,\n    });\n  }\n\n  componentWillUnmount() {\n    this.abortController.abort();\n  }\n\n  async fetchDataAsync(abortSignal: AbortSignal, officialRepository: boolean) {\n    const url = `${process.env.REACT_APP_AZURESEARCH_URL}/search?api-version=2020-06-30`;\n\n    let response = await fetch(url, {\n      method: 'POST',\n      body: JSON.stringify({\n        count: true,\n        facets: ['Metadata/Repository,count:10000'],\n        filter: `Metadata/OfficialRepositoryNumber eq ${\n          officialRepository ? '1' : '0'\n        }`,\n        top: 0, // Don't retrieve actual data\n      }),\n      headers: {\n        'api-key': process.env.REACT_APP_AZURESEARCH_KEY!,\n        'Content-Type': 'application/json',\n      },\n      signal: abortSignal,\n    });\n    const data = await response.json();\n    return BucketsResultsJson.Create(data);\n  }\n\n  sortResults(results: IBucket[], sortOrder: number): IBucket[] {\n    switch (sortOrder) {\n      case 0:\n        return results.sort((x, y) =>\n          x.official === y.official\n            ? x.bucket.localeCompare(y.bucket)\n            : x.official < y.official\n            ? 1\n            : -1\n        );\n\n      case 1:\n        return results.sort((x, y) => x.bucket.localeCompare(y.bucket));\n\n      case 2:\n        return results.sort((x, y) =>\n          x.manifests === y.manifests ? 0 : x.manifests < y.manifests ? 1 : -1\n        );\n      default:\n        throw new Error('Unexpected sort');\n    }\n  }\n\n  handleSortChange = (e: React.ChangeEvent<HTMLSelectElement>) => {\n    const sortOrder = e.target.selectedIndex;\n    this.setState({\n      sortIndex: sortOrder,\n      results: this.sortResults(this.state.results, sortOrder),\n    });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <Container className=\"mt-5 mb-5\">\n          <Row>\n            <Col className=\"my-auto\">\n              <SearchStatus\n                resultsCount={this.state.results.length}\n                searching={this.state.searching}\n                type=\"buckets\"\n              />\n            </Col>\n            <Col lg={3}>\n              <InputGroup size=\"sm\">\n                <InputGroup.Prepend>\n                  <InputGroup.Text>Sort by</InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  as=\"select\"\n                  size=\"sm\"\n                  custom\n                  onChange={this.handleSortChange}\n                >\n                  {this.sortModes.map((item, idx) => (\n                    <option key={idx} value={idx}>\n                      {item}\n                    </option>\n                  ))}\n                </Form.Control>\n              </InputGroup>\n            </Col>\n          </Row>\n\n          {this.state.results && (\n            <Row className=\"mt-2\">\n              <Col>\n                <Table striped bordered hover>\n                  <thead>\n                    <tr>\n                      <th>Bucket</th>\n                      <th>Manifests</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {this.state.results.map((item: IBucket) => (\n                      <tr>\n                        <td>\n                          <Link\n                            to={{\n                              pathname: '/apps',\n                              search: encodeURIComponent(`\"${item.bucket}\"`),\n                            }}\n                          >\n                            {Utils.extractPathFromUrl(item.bucket)}\n                          </Link>{' '}\n                          {item.official && <KnownBucketIcon />}\n                        </td>\n                        <td>{item.manifests}</td>\n                      </tr>\n                    ))}\n                  </tbody>\n                </Table>\n              </Col>\n            </Row>\n          )}\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\ninterface IBucket {\n  bucket: string;\n  manifests: number;\n  official: boolean;\n}\n\ninterface IBucketsState {\n  searching: boolean;\n  sortIndex: number;\n  results: IBucket[];\n}\n\nexport default Buckets;\n","import React, { PureComponent } from 'react';\nimport { Navbar, Nav } from 'react-bootstrap';\nimport { Link } from 'react-router-dom';\nimport { FaGithub } from 'react-icons/fa';\n\nclass NavBar extends PureComponent {\n  render() {\n    return (\n      <Navbar expand=\"sm\" bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand as={Link} to=\"/\">\n          ScoopSearch\n        </Navbar.Brand>\n        <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n        <Navbar.Collapse id=\"responsive-navbar-nav\">\n          <Nav className=\"mr-auto\">\n            <Nav.Link as={Link} to=\"/apps\">\n              Apps\n            </Nav.Link>\n            <Nav.Link as={Link} to=\"/buckets\">\n              Buckets\n            </Nav.Link>\n          </Nav>\n          <Nav>\n            <Nav.Link href=\"https://github.com/ScoopSearch\">\n              <FaGithub size=\"1.2em\" />\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default NavBar;\n","import React, { PureComponent } from 'react';\nimport './App.css';\nimport Search from './components/Search';\nimport Buckets from './components/Buckets';\nimport {\n  HashRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nimport NavBar from './components/NavBar';\n\nclass App extends PureComponent {\n  render() {\n    return (\n      <Router>\n        <NavBar />\n\n        <Switch>\n          <Route path=\"/apps/:page?\" component={Search} />\n          <Route path=\"/buckets\" component={Buckets} />\n          <Route path=\"/\">\n            <Redirect to=\"/apps\" />\n          </Route>\n        </Switch>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}